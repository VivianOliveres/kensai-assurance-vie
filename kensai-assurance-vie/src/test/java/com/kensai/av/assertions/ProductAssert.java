package com.kensai.av.assertions;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated



import com.kensai.av.datas.Product;


/**
 * {@link Product} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ProductAssert extends AbstractAssert<ProductAssert, Product> {

  /**
   * Creates a new </code>{@link ProductAssert}</code> to make assertions on actual Product.
   * @param actual the Product we want to make assertions on.
   */
  public ProductAssert(Product actual) {
    super(actual, ProductAssert.class);
  }

  /**
   * An entry point for ProductAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myProduct)</code> and get specific assertion with code completion.
   * @param actual the Product we want to make assertions on.
   * @return a new </code>{@link ProductAssert}</code>
   */
  public static ProductAssert assertThat(Product actual) {
    return new ProductAssert(actual);
  }

	/**
	 * Verifies that the actual Product is aV.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Product is not aV.
	 */
	public ProductAssert isAV() {
		// check that actual Product we want to make assertions on is not null.
		isNotNull();

		// check
		if (!actual.isAV()) {
			failWithMessage("\nExpected actual Product to be aV but was not.");
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Product is not aV.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Product is aV.
	 */
	public ProductAssert isNotAV() {
		// check that actual Product we want to make assertions on is not null.
		isNotNull();

		// check
		if (actual.isAV()) {
			failWithMessage("\nExpected actual Product not to be aV but was.");
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Product's name is equal to the given one.
	 * @param name the given name to compare the actual Product's name to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Product's name is not equal to the given one.
	 */
	public ProductAssert hasName(String name) {
		// check that actual Product we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualName = actual.getName();
		if (!org.assertj.core.util.Objects.areEqual(actualName, name)) {
			failWithMessage(assertjErrorMessage, actual, name, actualName);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Product is pEA.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Product is not pEA.
	 */
	public ProductAssert isPEA() {
		// check that actual Product we want to make assertions on is not null.
		isNotNull();

		// check
		if (!actual.isPEA()) {
			failWithMessage("\nExpected actual Product to be pEA but was not.");
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Product is not pEA.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Product is pEA.
	 */
	public ProductAssert isNotPEA() {
		// check that actual Product we want to make assertions on is not null.
		isNotNull();

		// check
		if (actual.isPEA()) {
			failWithMessage("\nExpected actual Product not to be pEA but was.");
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Product's url is equal to the given one.
	 * @param url the given url to compare the actual Product's url to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Product's url is not equal to the given one.
	 */
	public ProductAssert hasUrl(String url) {
		// check that actual Product we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected url of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualUrl = actual.getUrl();
		if (!org.assertj.core.util.Objects.areEqual(actualUrl, url)) {
			failWithMessage(assertjErrorMessage, actual, url, actualUrl);
		}

		// return the current assertion for method chaining
		return this;
	}

}
