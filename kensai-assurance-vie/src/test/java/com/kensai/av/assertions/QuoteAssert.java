package com.kensai.av.assertions;

import java.time.LocalDate;

import org.assertj.core.api.AbstractAssert;

import com.kensai.av.datas.Product;
import com.kensai.av.datas.Quote;


/**
 * {@link Quote} specific assertions - Generated by CustomAssertionGenerator.
 */
public class QuoteAssert extends AbstractAssert<QuoteAssert, Quote> {

  /**
   * Creates a new </code>{@link QuoteAssert}</code> to make assertions on actual ProductValues.
   * @param actual the ProductValues we want to make assertions on.
   */
  public QuoteAssert(Quote actual) {
    super(actual, QuoteAssert.class);
  }

  /**
   * An entry point for ProductValuesAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myProductValues)</code> and get specific assertion with code completion.
   * @param actual the ProductValues we want to make assertions on.
   * @return a new </code>{@link QuoteAssert}</code>
   */
  public static QuoteAssert assertThat(Quote actual) {
    return new QuoteAssert(actual);
  }

  /**
   * Verifies that the actual ProductValues's date is equal to the given one.
   * @param date the given date to compare the actual ProductValues's date to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductValues's date is not equal to the given one.
   */
  public QuoteAssert hasDate(LocalDate date) {
    // check that actual ProductValues we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected date of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    LocalDate actualDate = actual.getDate();
    if (!org.assertj.core.util.Objects.areEqual(actualDate, date)) {
      failWithMessage(assertjErrorMessage, actual, date, actualDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductValues's notationLipperAbsolutePerformances is equal to the given one.
   * @param notationLipperAbsolutePerformances the given notationLipperAbsolutePerformances to compare the actual ProductValues's notationLipperAbsolutePerformances to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductValues's notationLipperAbsolutePerformances is not equal to the given one.
   */
  public QuoteAssert hasNotationLipperAbsolutePerformances(int notationLipperAbsolutePerformances) {
    // check that actual ProductValues we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected notationLipperAbsolutePerformances of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualNotationLipperAbsolutePerformances = actual.getNotationLipperAbsolutePerformances();
    if (actualNotationLipperAbsolutePerformances != notationLipperAbsolutePerformances) {
      failWithMessage(assertjErrorMessage, actual, notationLipperAbsolutePerformances, actualNotationLipperAbsolutePerformances);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductValues's notationLipperCapitalPreservation is equal to the given one.
   * @param notationLipperCapitalPreservation the given notationLipperCapitalPreservation to compare the actual ProductValues's notationLipperCapitalPreservation to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductValues's notationLipperCapitalPreservation is not equal to the given one.
   */
  public QuoteAssert hasNotationLipperCapitalPreservation(int notationLipperCapitalPreservation) {
    // check that actual ProductValues we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected notationLipperCapitalPreservation of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualNotationLipperCapitalPreservation = actual.getNotationLipperCapitalPreservation();
    if (actualNotationLipperCapitalPreservation != notationLipperCapitalPreservation) {
      failWithMessage(assertjErrorMessage, actual, notationLipperCapitalPreservation, actualNotationLipperCapitalPreservation);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductValues's notationLipperRegularPerformances is equal to the given one.
   * @param notationLipperRegularPerformances the given notationLipperRegularPerformances to compare the actual ProductValues's notationLipperRegularPerformances to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductValues's notationLipperRegularPerformances is not equal to the given one.
   */
  public QuoteAssert hasNotationLipperRegularPerformances(int notationLipperRegularPerformances) {
    // check that actual ProductValues we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected notationLipperRegularPerformances of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualNotationLipperRegularPerformances = actual.getNotationLipperRegularPerformances();
    if (actualNotationLipperRegularPerformances != notationLipperRegularPerformances) {
      failWithMessage(assertjErrorMessage, actual, notationLipperRegularPerformances, actualNotationLipperRegularPerformances);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductValues's notationMorningStar is equal to the given one.
   * @param notationMorningStar the given notationMorningStar to compare the actual ProductValues's notationMorningStar to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductValues's notationMorningStar is not equal to the given one.
   */
  public QuoteAssert hasNotationMorningStar(int notationMorningStar) {
    // check that actual ProductValues we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected notationMorningStar of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualNotationMorningStar = actual.getNotationMorningStar();
    if (actualNotationMorningStar != notationMorningStar) {
      failWithMessage(assertjErrorMessage, actual, notationMorningStar, actualNotationMorningStar);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductValues's price is equal to the given one.
   * @param price the given price to compare the actual ProductValues's price to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductValues's price is not equal to the given one.
   */
  public QuoteAssert hasPrice(double price) {
    // check that actual ProductValues we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected price of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    double actualPrice = actual.getPrice();
    if (actualPrice != price) {
      failWithMessage(assertjErrorMessage, actual, price, actualPrice);
    }

    // return the current assertion for method chaining
    return this;
  }

  	/**
	 * Verifies that the actual ProductValues's priceCurrency is equal to the given one.
	 * @param priceCurrency the given priceCurrency to compare the actual ProductValues's priceCurrency to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual ProductValues's priceCurrency is not equal to the given one.
	 */
	public QuoteAssert hasPriceCurrency(String priceCurrency) {
		// check that actual ProductValues we want to make assertions on is not null.
		isNotNull();

		// overrides the default error message with a more explicit one
		String assertjErrorMessage = "\nExpected priceCurrency of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

		// null safe check
		String actualPriceCurrency = actual.getPriceCurrency();
		if (!org.assertj.core.util.Objects.areEqual(actualPriceCurrency, priceCurrency)) {
			failWithMessage(assertjErrorMessage, actual, priceCurrency, actualPriceCurrency);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual ProductValues's product is equal to the given one.
	 * @param product the given product to compare the actual ProductValues's product to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual ProductValues's product is not equal to the given one.
	 */
  public QuoteAssert hasProduct(Product product) {
    // check that actual ProductValues we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected product of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Product actualProduct = actual.getProduct();
    if (!org.assertj.core.util.Objects.areEqual(actualProduct, product)) {
      failWithMessage(assertjErrorMessage, actual, product, actualProduct);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductValues's sharpeRatio1 is equal to the given one.
   * @param sharpeRatio1 the given sharpeRatio1 to compare the actual ProductValues's sharpeRatio1 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductValues's sharpeRatio1 is not equal to the given one.
   */
  public QuoteAssert hasSharpeRatio1(double sharpeRatio1) {
    // check that actual ProductValues we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected sharpeRatio1 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    double actualSharpeRatio1 = actual.getSharpeRatio1();
    if (actualSharpeRatio1 != sharpeRatio1) {
      failWithMessage(assertjErrorMessage, actual, sharpeRatio1, actualSharpeRatio1);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductValues's sharpeRatio10 is equal to the given one.
   * @param sharpeRatio10 the given sharpeRatio10 to compare the actual ProductValues's sharpeRatio10 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductValues's sharpeRatio10 is not equal to the given one.
   */
  public QuoteAssert hasSharpeRatio10(double sharpeRatio10) {
    // check that actual ProductValues we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected sharpeRatio10 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    double actualSharpeRatio10 = actual.getSharpeRatio10();
    if (actualSharpeRatio10 != sharpeRatio10) {
      failWithMessage(assertjErrorMessage, actual, sharpeRatio10, actualSharpeRatio10);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductValues's sharpeRatio3 is equal to the given one.
   * @param sharpeRatio3 the given sharpeRatio3 to compare the actual ProductValues's sharpeRatio3 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductValues's sharpeRatio3 is not equal to the given one.
   */
  public QuoteAssert hasSharpeRatio3(double sharpeRatio3) {
    // check that actual ProductValues we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected sharpeRatio3 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    double actualSharpeRatio3 = actual.getSharpeRatio3();
    if (actualSharpeRatio3 != sharpeRatio3) {
      failWithMessage(assertjErrorMessage, actual, sharpeRatio3, actualSharpeRatio3);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProductValues's sharpeRatio5 is equal to the given one.
   * @param sharpeRatio5 the given sharpeRatio5 to compare the actual ProductValues's sharpeRatio5 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProductValues's sharpeRatio5 is not equal to the given one.
   */
  public QuoteAssert hasSharpeRatio5(double sharpeRatio5) {
    // check that actual ProductValues we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected sharpeRatio5 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    double actualSharpeRatio5 = actual.getSharpeRatio5();
    if (actualSharpeRatio5 != sharpeRatio5) {
      failWithMessage(assertjErrorMessage, actual, sharpeRatio5, actualSharpeRatio5);
    }

    // return the current assertion for method chaining
    return this;
  }

}
